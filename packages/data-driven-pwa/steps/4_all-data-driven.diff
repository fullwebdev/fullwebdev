diff --git a/project/app/js/main.js b/project/app/js/main.js
index 7708915..fd1a289 100644
--- a/project/app/js/main.js
+++ b/project/app/js/main.js
@@ -14,7 +14,48 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-// TODO - register service worker
+if ('serviceWorker' in navigator) {
+  window.addEventListener('load', () => {
+    navigator.serviceWorker.register('/sw.js')
+      .then(registration => {
+        console.log(`Service Worker registered! Scope: ${registration.scope}`);
+      })
+      .catch(err => {
+        console.log(`Service Worker registration failed: ${err}`);
+      });
+  });
+}
+
+function createIndexedDB() {
+  if (!('indexedDB' in window)) {return null;}
+  return idb.open('dashboardr', 1, function(upgradeDb) {
+    if (!upgradeDb.objectStoreNames.contains('events')) {
+      const eventsOS = upgradeDb.createObjectStore('events', {keyPath: 'id'});
+    }
+  });
+}
+
+function saveEventDataLocally(events) {
+  if (!('indexedDB' in window)) {return null;}
+  return dbPromise.then(db => {
+    const tx = db.transaction('events', 'readwrite');
+    const store = tx.objectStore('events');
+    return Promise.all(events.map(event => store.put(event)))
+    .catch(() => {
+      tx.abort();
+      throw Error('Events were not added to the store');
+    });
+  });
+}
+
+function getLocalEventData() {
+  if (!('indexedDB' in window)) {return null;}
+  return dbPromise.then(db => {
+    const tx = db.transaction('events', 'readonly');
+    const store = tx.objectStore('events');
+    return store.getAll();
+  });
+}
 
 const container = document.getElementById('container');
 const offlineMessage = document.getElementById('offline');
@@ -27,7 +68,8 @@ addEventButton.addEventListener('click', addAndPostEvent);
 
 Notification.requestPermission();
 
-// TODO - create indexedDB database
+// create indexedDB database
+const dbPromise = createIndexedDB();
 
 loadContentNetworkFirst();
 
@@ -35,8 +77,25 @@ function loadContentNetworkFirst() {
   getServerData()
   .then(dataFromNetwork => {
     updateUI(dataFromNetwork);
-  }).catch(err => { // if we can't connect to the server...
+    saveEventDataLocally(dataFromNetwork)
+    .then(() => {
+      setLastUpdated(new Date());
+      messageDataSaved();
+    }).catch(err => {
+      messageSaveError();
+      console.warn(err);
+    });
+  }).catch(err => {
     console.log('Network requests have failed, this is expected if offline');
+    getLocalEventData()
+    .then(offlineData => {
+      if (!offlineData.length) {
+        messageNoData();
+      } else {
+        messageOffline();
+        updateUI(offlineData); 
+      }
+    });
   });
 }
 
@@ -62,7 +121,7 @@ function addAndPostEvent(e) {
   };
   updateUI([data]);
 
-  // TODO - save event data locally
+  saveEventDataLocally([data]);
 
   const headers = new Headers({'Content-Type': 'application/json'});
   const body = JSON.stringify(data);
diff --git a/project/app/sw.js b/project/app/sw.js
index 95e8cf2..9e4eb08 100644
--- a/project/app/sw.js
+++ b/project/app/sw.js
@@ -13,3 +13,12 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
+
+importScripts('https://storage.googleapis.com/workbox-cdn/releases/5.0.0/workbox-sw.js');
+
+if (workbox) {
+  console.log(`Yay! Workbox is loaded ðŸŽ‰`);
+  workbox.precaching.precacheAndRoute([]);
+} else {
+  console.log(`Boo! Workbox didn't load ðŸ˜¬`);
+}
diff --git a/project/gulpfile.js b/project/gulpfile.js
index 32e7d07..cea26fa 100644
--- a/project/gulpfile.js
+++ b/project/gulpfile.js
@@ -15,6 +15,7 @@ limitations under the License.
 */
 const gulp = require('gulp');
 const del = require('del');
+const workboxBuild = require('workbox-build');
 
 // Clean "build" directory
 const clean = () => {
@@ -28,10 +29,30 @@ const copy = () => {
 };
 gulp.task('copy', copy);
 
-// TODO - add "service worker" task here
+const serviceWorker = () => {
+  return workboxBuild.injectManifest({
+    swSrc: 'app/sw.js',
+    swDest: 'build/sw.js',
+    globDirectory: 'build',
+    globPatterns: [
+      'style/main.css',
+      'index.html',
+      'js/idb-promised.js',
+      'js/main.js',
+      'images/**/*.*',
+      'manifest.json'
+    ]
+  }).then(resources => {
+    console.log(`Injected ${resources.count} resources for precaching, ` +
+        `totaling ${resources.size} bytes.`);
+  }).catch(err => {
+    console.log('Uh oh ðŸ˜¬', err);
+  });
+}
+gulp.task('service-worker', serviceWorker);
 
 // This is the app's build process
-const build = gulp.series('clean', 'copy');
+const build = gulp.series('clean', 'copy', 'service-worker');
 gulp.task('build', build);
 
 // Watch our "app" files & rebuild whenever they change
